version: '3.8'

services:
  # Qdrant Vector Database - Primary service
  qdrant:
    image: qdrant/qdrant:v1.12.5
    container_name: cortex-qdrant
    restart: unless-stopped
    ports:
      - "${QDRANT_HTTP_PORT:-6333}:6333"   # HTTP API
      - "${QDRANT_GRPC_PORT:-6334}:6334"   # gRPC API
    volumes:
      - qdrant_storage:/qdrant/storage:z
      - ./config/qdrant.yaml:/qdrant/config/production.yaml:ro
    environment:
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__LOG_LEVEL: ${QDRANT_LOG_LEVEL:-INFO}
      QDRANT__STORAGE__STORAGE_PATH: /qdrant/storage
      # Performance tuning for 1M+ vectors
      QDRANT__STORAGE__OPTIMIZERS__DEFAULT_SEGMENT_NUMBER: 8
      QDRANT__STORAGE__OPTIMIZERS__INDEXING_THRESHOLD_KB: 20000
      QDRANT__STORAGE__PERFORMANCE__MAX_OPTIMIZATION_THREADS: 16
      # Security
      QDRANT__SERVICE__API_KEY: ${QDRANT_API_KEY:-}
      # Telemetry
      QDRANT__TELEMETRY_DISABLED: ${QDRANT_TELEMETRY_DISABLED:-false}
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:6333/readyz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - cortex-network
    deploy:
      resources:
        limits:
          cpus: '${QDRANT_CPU_LIMIT:-4}'
          memory: ${QDRANT_MEMORY_LIMIT:-8G}
        reservations:
          cpus: '${QDRANT_CPU_RESERVATION:-2}'
          memory: ${QDRANT_MEMORY_RESERVATION:-4G}

  # SurrealDB - Metadata and relational data
  surrealdb:
    image: surrealdb/surrealdb:v2.3.10
    container_name: cortex-surrealdb
    restart: unless-stopped
    command: start --log info --user ${SURREAL_USER:-root} --pass ${SURREAL_PASS:-root} file:/data/cortex.db
    ports:
      - "${SURREAL_PORT:-8000}:8000"
    volumes:
      - surreal_data:/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - cortex-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:v2.56.2
    container_name: cortex-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus-alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - cortex-network
    depends_on:
      - qdrant
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:11.5.0
    container_name: cortex-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL:-http://localhost:3000}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
      GF_AUTH_ANONYMOUS_ENABLED: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - cortex-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M

  # Redis - Optional: For distributed caching and rate limiting
  redis:
    image: redis:7.4-alpine
    container_name: cortex-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - cortex-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    profiles:
      - full  # Only start with --profile full

  # Jaeger - Optional: Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.63.0
    container_name: cortex-jaeger
    restart: unless-stopped
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"        # Jaeger UI
      - "${JAEGER_COLLECTOR_PORT:-14268}:14268" # Jaeger collector HTTP
      - "${JAEGER_OTLP_GRPC_PORT:-4317}:4317"   # OTLP gRPC
      - "${JAEGER_OTLP_HTTP_PORT:-4318}:4318"   # OTLP HTTP
    environment:
      COLLECTOR_OTLP_ENABLED: true
      SPAN_STORAGE_TYPE: badger
      BADGER_EPHEMERAL: false
      BADGER_DIRECTORY_VALUE: /badger/data
      BADGER_DIRECTORY_KEY: /badger/key
    volumes:
      - jaeger_data:/badger
    networks:
      - cortex-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    profiles:
      - full  # Only start with --profile full

volumes:
  qdrant_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${QDRANT_DATA_PATH:-./data/qdrant}
  surreal_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local
  jaeger_data:
    driver: local

networks:
  cortex-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
